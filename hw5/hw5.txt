1.
    Tp <= ((work - span) / P) + span
            #complete steps     #incomplete steps

        Assuming span incomplete steps, as stated in the equation, that means that only the incomplete steps are completing strands that are part of the span.
        That means that the complete steps only need to complete the strands not part of the span giving you the relation (work - span)/P

2. 
    T4 = 100s       T64=10s

    a. lowest parallelism? -> work/span

    100 <= ((work - span) / 4) + span          100 >= work / 4      400 >= work          100 >= span
    10 <= ((work - span) / 64) + span          10 >= work / 64      640 >= work          10 >= span

    100 = ((work - span) / 4) + span
    10 = ((work - span) / 64) + span
    ________________________________
    90 = 15(work - span) / 64     -> work - span  = 384

    10 = ((384) / 64) + span

    span = 4       work = 388

    min parallelism = 97

    b. what is the highest parallelism of the program (work / span)

    span >= 1    -> span = 1

    100 = ((work - 1) / 4) + 1 -> work = 397

    max parallelism = 397


3.
    The max parallelism calculated from the previous measurevments = 397 where work = 397. 
    Following the work law, T4 >= 397/4 = 99.25 and with min parallelism = 97, work = 388 giving T4 >= 97.
    Ben measured, however, that T4=80 the second time. This means that one of his measurements are wrong.

4.
    T4 = 80s                        T10 = 42s                       T64 = 10s
    80 >= work/4                    42 >= work/10                   10 >= work / 64
    320 >= work                     420 >= work                     640 >= work           -> work <= 320
    80 >= span                      42 >= span                      10 >= span            -> span <= 10
    80 <= (work - span)/4 + span    42 <= (work - span)/10 + span   10 <= (work - span)/64 + span
    80 <= (320 - 10)/4 + 10         42 <= (320 - 10)/10 + 10        10 <= (320 - 10)/64 + 10
    Good                            Impossible                      Good

5.
    Matrix A;
    If n = 1
        return A;
    A1, A2, A3, A4
    spawn Transpose(A1)
    spawn Transpose(A2)
    spawn Transpose(A3)
    Transpose(A4)
    sync

    parallel for(row_start -> mid_row)
        parallel for(mid_col -> col_end)
            swap A[i][j] A[j][i]
    
    Work: 4M(n/2) + O(n^2) = O(n^2)
    Span: S(n/2) + O(log(n/2)^2) = O(log(n/2)^3) + O(log(n/2)^2) = O(log(n/2)^3)
    Parallelism = work/span = O(n^2/(log(n)^3))